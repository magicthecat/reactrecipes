import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Kanban.module.css';
import { useState, useEffect } from 'react';

const TaskPill = ({ todo, dragCallback }) => {
  return (
    <div
      key={todo.id}
      className={styles.pill}
      draggable
      onDragStart={(event) => dragCallback(event, todo)}
    >
      <h3>{todo.type}</h3>
      <p>{todo.description}</p>
    </div>
  );
};

const KanbanColumn = ({
  children,
  columnTitle,
  status,
  handleDragOverCallback,
  handleDropCallback,
  handleDragStartCallback,
  handleDragEnterCallback,
  handleDragEndCallback,
}) => {
  return (
    <div
      className={styles.column}
      onDragOver={handleDragOverCallback}
      onDrop={(event) => handleDropCallback(event, status)}
    >
      <h2>{columnTitle}</h2>
      <div className={styles.cards}>
        {children}
      </div>
    </div>
  );
};

const sortTasksByPriority = (tasks) => {
  return tasks.sort((a, b) => a.priority - b.priority);
};

export default function Home() {
  const [todos, setTodos] = useState([]);

  useEffect(() => {
    fetch('http://localhost:3001/todos')
      .then((response) => response.json())
      .then((data) => {
        setTodos(data);
        console.log(data);
      })
      .catch((error) => {
        console.error('Error fetching todos:', error);
      });
  }, []);

  const getColumnTodos = (status) => {
    const columnTodos = todos.filter((todo) => todo.status === status);
    return sortTasksByPriority(columnTodos);
  };

  const handleDragStart = (event, todo) => {
    event.dataTransfer.setData('text/plain', JSON.stringify(todo));
  };

  const handleDragOver = (event) => {
    event.preventDefault();
  };

  const handleDrop = (event, status) => {
    event.preventDefault();
    const droppedTodo = JSON.parse(event.dataTransfer.getData('text/plain'));

    const updatedTodos = todos.map((todo) => {
      if (todo.id === droppedTodo.id) {
        return { ...todo, status };
      }
      return todo;
    });

    setTodos(updatedTodos);

    fetch(`http://localhost:3001/todos/${droppedTodo.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ ...droppedTodo, status }),
    })
      .then((response) => response.json())
      .then((data) => {
        console.log('Task status updated successfully:', data);
      })
      .catch((error) => {
        console.error('Error updating task status:', error);
      });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Kanban Board</h1>

        <div className={styles.kanban}>
          <KanbanColumn
            columnTitle="To Do"
            status="todo"
            handleDragOverCallback={handleDragOver}
            handleDropCallback={handleDrop}
          >
            {getColumnTodos('todo').map((todo) => (
              <TaskPill key={todo.id} todo={todo} dragCallback={handleDragStart} />
            ))}
          </KanbanColumn>

          <KanbanColumn
            columnTitle="In Progress"
            status="in-progress"
            handleDragOverCallback={handleDragOver}
            handleDropCallback={handleDrop}
          >
            {getColumnTodos('in-progress').map((todo) => (
              <TaskPill key={todo.id} todo={todo} dragCallback={handleDragStart} />
            ))}
          </KanbanColumn>

          <KanbanColumn
            columnTitle="Done"
            status="done"
            handleDragOverCallback={handleDragOver}
            handleDropCallback={handleDrop}
          >
            {getColumnTodos('done').map((todo) => (
              <TaskPill key={todo.id} todo={todo} dragCallback={handleDragStart} />
            ))}
          </KanbanColumn>
        </div>
      </main>

      <footer className={styles.footer}>
        <p>Recipes</p>
      </footer>
    </div>
  );
}